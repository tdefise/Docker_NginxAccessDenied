user                            www;
worker_processes                auto; # it will be determinate automatically by the number of core

error_log                       /var/log/nginx/error.log warn;
#pid                             /var/run/nginx.pid; # it permit you to use /etc/init.d/nginx reload|restart|stop|start

events {
    worker_connections          1024;
}

http {
    include                     /etc/nginx/buffer.conf;
    include                     /etc/nginx/mime.types;
    default_type                application/octet-stream;
    sendfile                    on;
    access_log                  /var/log/nginx/access.log;
    keepalive_timeout           3000;
    server_tokens               off;
    include                     /etc/nginx/blockuseragents.rules;
  
    # X-Frame-Options is to prevent from clickJacking attack
    add_header X-Frame-Options SAMEORIGIN;
    add_header Referrer-Header  "same-origin"; 
    
    # Disable content-type sniffing on some browsers.
    add_header X-Content-Type-Options "nosniff";
    
    # This header enables the Cross-site scripting (XSS) filter
    add_header X-XSS-Protection "1; mode=block";
    
    # This will enforce HTTP browsing into HTTPS and avoid ssl stripping attack
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";
    
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com";

    server {

        listen                  80;
        server_name             rasp.home.com;
        if ($blockedagent) {
           return 403;
        }

        if ($request_method !~ ^(GET|HEAD)$) {
           return 444;
        }

        location / {
          root                    /www/website;
          index                   index.html index.htm;
          client_max_body_size    32m;

          error_page              500 502 503 504  /50x.html;
        
          if ($request_method = 'GET') {
              add_header 'Access-Control-Allow-Origin' '*' always;
              add_header 'Access-Control-Allow-Credentials' 'true' always;
              add_header 'Access-Control-Allow-Methods' 'GET' always;
              add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
          }

        }

        location = /50x.html {
           root              /var/lib/nginx/html;
        }
    }

    gzip on;
    gzip_disable "msie6";
    
    # Tells Nginx not to compress files smaller than 256 bytes. This is very small files barely benefit from compression.
    gzip_min_length 256;
    
    # Enables gzipping of responses for the specified MIME types in addition to “text/html”.
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
    
    # Enables or disables inserting the “Vary: Accept-Encoding” response header field if the directives gzip, gzip_static, or gunzip are active.
    gzip_vary on;
    
    # Enables or disables gzipping of responses for proxied requests depending on the request and response.
    gzip_proxied any;
    
    # Sets the minimum HTTP version of a request required to compress a response.
    gzip_http_version 1.1;
        
    # Sets a gzip compression level of a response. 
    gzip_comp_level 6;
    
    # Sets the number and size of buffers used to compress a response. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.
    gzip_buffers 16 8k;

}

/* -----------------------------------------------
/* Author : Vincent Garreau  - vincentgarreau.com
/* MIT license: http://opensource.org/licenses/MIT
/* Demo / Generator : vincentgarreau.com/particles.js
/* GitHub : github.com/VincentGarreau/particles.js
/* How to use? : Check the GitHub README
/* v2.0.0
/* ----------------------------------------------- */
'use strict';
/**
 * @param {string} hex
 * @return {?}
 */
function hexToRgb(hex) {
  /** @type {!RegExp} */
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function(canCreateDiscussions, w, h, rx) {
    return w + w + h + h + rx + rx;
  });
  /** @type {(Array<string>|null)} */
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r : parseInt(result[1], 16),
    g : parseInt(result[2], 16),
    b : parseInt(result[3], 16)
  } : null;
}
/**
 * @param {number} num
 * @param {number} max
 * @param {number} min
 * @return {?}
 */
function clamp(num, max, min) {
  return Math.min(Math.max(num, max), min);
}
/**
 * @param {string} value
 * @param {string} array
 * @return {?}
 */
function isInArray(value, array) {
  return array.indexOf(value) > -1;
}
/**
 * @param {string} tag_id
 * @param {!Object} params
 * @return {undefined}
 */
var pJS = function(tag_id, params) {
  /** @type {(Element|null)} */
  var canvas_el = document.querySelector("#" + tag_id + " > .particles-js-canvas-el");
  this.pJS = {
    canvas : {
      el : canvas_el,
      w : canvas_el.offsetWidth,
      h : canvas_el.offsetHeight
    },
    particles : {
      number : {
        value : 400,
        density : {
          enable : true,
          value_area : 800
        }
      },
      color : {
        value : "#fff"
      },
      shape : {
        type : "circle",
        stroke : {
          width : 0,
          color : "#ff0000"
        },
        polygon : {
          nb_sides : 5
        },
        image : {
          src : "",
          width : 100,
          height : 100
        }
      },
      opacity : {
        value : 1,
        random : false,
        anim : {
          enable : false,
          speed : 2,
          opacity_min : 0,
          sync : false
        }
      },
      size : {
        value : 20,
        random : false,
        anim : {
          enable : false,
          speed : 20,
          size_min : 0,
          sync : false
        }
      },
      line_linked : {
        enable : true,
        distance : 100,
        color : "#fff",
        opacity : 1,
        width : 1
      },
      move : {
        enable : true,
        speed : 2,
        direction : "none",
        random : false,
        straight : false,
        out_mode : "out",
        bounce : false,
        attract : {
          enable : false,
          rotateX : 3e3,
          rotateY : 3e3
        }
      },
      array : []
    },
    interactivity : {
      detect_on : "canvas",
      events : {
        onhover : {
          enable : true,
          mode : "grab"
        },
        onclick : {
          enable : true,
          mode : "push"
        },
        resize : true
      },
      modes : {
        grab : {
          distance : 100,
          line_linked : {
            opacity : 1
          }
        },
        bubble : {
          distance : 200,
          size : 80,
          duration : .4
        },
        repulse : {
          distance : 200,
          duration : .4
        },
        push : {
          particles_nb : 4
        },
        remove : {
          particles_nb : 2
        }
      },
      mouse : {}
    },
    retina_detect : false,
    fn : {
      interact : {},
      modes : {},
      vendors : {}
    },
    tmp : {}
  };
  var pJS = this.pJS;
  if (params) {
    Object.deepExtend(pJS, params);
  }
  pJS.tmp.obj = {
    size_value : pJS.particles.size.value,
    size_anim_speed : pJS.particles.size.anim.speed,
    move_speed : pJS.particles.move.speed,
    line_linked_distance : pJS.particles.line_linked.distance,
    line_linked_width : pJS.particles.line_linked.width,
    mode_grab_distance : pJS.interactivity.modes.grab.distance,
    mode_bubble_distance : pJS.interactivity.modes.bubble.distance,
    mode_bubble_size : pJS.interactivity.modes.bubble.size,
    mode_repulse_distance : pJS.interactivity.modes.repulse.distance
  };
  /**
   * @return {undefined}
   */
  pJS.fn.retinaInit = function() {
    if (pJS.retina_detect && window.devicePixelRatio > 1) {
      /** @type {number} */
      pJS.canvas.pxratio = window.devicePixelRatio;
      /** @type {boolean} */
      pJS.tmp.retina = true;
    } else {
      /** @type {number} */
      pJS.canvas.pxratio = 1;
      /** @type {boolean} */
      pJS.tmp.retina = false;
    }
    /** @type {number} */
    pJS.canvas.w = pJS.canvas.el.offsetWidth * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.canvas.h = pJS.canvas.el.offsetHeight * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.particles.size.value = pJS.tmp.obj.size_value * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.particles.size.anim.speed = pJS.tmp.obj.size_anim_speed * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.particles.move.speed = pJS.tmp.obj.move_speed * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.particles.line_linked.distance = pJS.tmp.obj.line_linked_distance * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.interactivity.modes.grab.distance = pJS.tmp.obj.mode_grab_distance * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.interactivity.modes.bubble.distance = pJS.tmp.obj.mode_bubble_distance * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.particles.line_linked.width = pJS.tmp.obj.line_linked_width * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.interactivity.modes.bubble.size = pJS.tmp.obj.mode_bubble_size * pJS.canvas.pxratio;
    /** @type {number} */
    pJS.interactivity.modes.repulse.distance = pJS.tmp.obj.mode_repulse_distance * pJS.canvas.pxratio;
  };
  /**
   * @return {undefined}
   */
  pJS.fn.canvasInit = function() {
    pJS.canvas.ctx = pJS.canvas.el.getContext("2d");
  };
  /**
   * @return {undefined}
   */
  pJS.fn.canvasSize = function() {
    pJS.canvas.el.width = pJS.canvas.w;
    pJS.canvas.el.height = pJS.canvas.h;
    if (pJS && pJS.interactivity.events.resize) {
      window.addEventListener("resize", function() {
        pJS.canvas.w = pJS.canvas.el.offsetWidth;
        pJS.canvas.h = pJS.canvas.el.offsetHeight;
        if (pJS.tmp.retina) {
          pJS.canvas.w *= pJS.canvas.pxratio;
          pJS.canvas.h *= pJS.canvas.pxratio;
        }
        pJS.canvas.el.width = pJS.canvas.w;
        pJS.canvas.el.height = pJS.canvas.h;
        if (!pJS.particles.move.enable) {
          pJS.fn.particlesEmpty();
          pJS.fn.particlesCreate();
          pJS.fn.particlesDraw();
          pJS.fn.vendors.densityAutoParticles();
        }
        pJS.fn.vendors.densityAutoParticles();
      });
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.canvasPaint = function() {
    pJS.canvas.ctx.fillRect(0, 0, pJS.canvas.w, pJS.canvas.h);
  };
  /**
   * @return {undefined}
   */
  pJS.fn.canvasClear = function() {
    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);
  };
  /**
   * @param {string} color
   * @param {?} opacity
   * @param {number} position
   * @return {undefined}
   */
  pJS.fn.particle = function(color, opacity, position) {
    if (this.radius = (pJS.particles.size.random ? Math.random() : 1) * pJS.particles.size.value, pJS.particles.size.anim.enable && (this.size_status = false, this.vs = pJS.particles.size.anim.speed / 100, pJS.particles.size.anim.sync || (this.vs = this.vs * Math.random())), this.x = position ? position.x : Math.random() * pJS.canvas.w, this.y = position ? position.y : Math.random() * pJS.canvas.h, this.x > pJS.canvas.w - 2 * this.radius ? this.x = this.x - this.radius : this.x < 2 * this.radius && 
    (this.x = this.x + this.radius), this.y > pJS.canvas.h - 2 * this.radius ? this.y = this.y - this.radius : this.y < 2 * this.radius && (this.y = this.y + this.radius), pJS.particles.move.bounce && pJS.fn.vendors.checkOverlap(this, position), this.color = {}, "object" == typeof color.value) {
      if (color.value instanceof Array) {
        var color_selected = color.value[Math.floor(Math.random() * pJS.particles.color.value.length)];
        this.color.rgb = hexToRgb(color_selected);
      } else {
        if (void 0 != color.value.r && void 0 != color.value.g && void 0 != color.value.b) {
          this.color.rgb = {
            r : color.value.r,
            g : color.value.g,
            b : color.value.b
          };
        }
        if (void 0 != color.value.h && void 0 != color.value.s && void 0 != color.value.l) {
          this.color.hsl = {
            h : color.value.h,
            s : color.value.s,
            l : color.value.l
          };
        }
      }
    } else {
      if ("random" == color.value) {
        this.color.rgb = {
          r : Math.floor(256 * Math.random()) + 0,
          g : Math.floor(256 * Math.random()) + 0,
          b : Math.floor(256 * Math.random()) + 0
        };
      } else {
        if ("string" == typeof color.value) {
          /** @type {string} */
          this.color = color;
          this.color.rgb = hexToRgb(this.color.value);
        }
      }
    }
    /** @type {number} */
    this.opacity = (pJS.particles.opacity.random ? Math.random() : 1) * pJS.particles.opacity.value;
    if (pJS.particles.opacity.anim.enable) {
      /** @type {boolean} */
      this.opacity_status = false;
      /** @type {number} */
      this.vo = pJS.particles.opacity.anim.speed / 100;
      if (!pJS.particles.opacity.anim.sync) {
        /** @type {number} */
        this.vo = this.vo * Math.random();
      }
    }
    var velocity = {};
    switch(pJS.particles.move.direction) {
      case "top":
        velocity = {
          x : 0,
          y : -1
        };
        break;
      case "top-right":
        velocity = {
          x : .5,
          y : -.5
        };
        break;
      case "right":
        velocity = {
          x : 1,
          y : -0
        };
        break;
      case "bottom-right":
        velocity = {
          x : .5,
          y : .5
        };
        break;
      case "bottom":
        velocity = {
          x : 0,
          y : 1
        };
        break;
      case "bottom-left":
        velocity = {
          x : -.5,
          y : 1
        };
        break;
      case "left":
        velocity = {
          x : -1,
          y : 0
        };
        break;
      case "top-left":
        velocity = {
          x : -.5,
          y : -.5
        };
        break;
      default:
        velocity = {
          x : 0,
          y : 0
        };
    }
    if (pJS.particles.move.straight) {
      /** @type {number} */
      this.vx = velocity.x;
      /** @type {number} */
      this.vy = velocity.y;
      if (pJS.particles.move.random) {
        /** @type {number} */
        this.vx = this.vx * Math.random();
        /** @type {number} */
        this.vy = this.vy * Math.random();
      }
    } else {
      /** @type {number} */
      this.vx = velocity.x + Math.random() - .5;
      /** @type {number} */
      this.vy = velocity.y + Math.random() - .5;
    }
    this.vx_i = this.vx;
    this.vy_i = this.vy;
    /** @type {string} */
    var shape_type = pJS.particles.shape.type;
    if ("object" == typeof shape_type) {
      if (shape_type instanceof Array) {
        var shape_selected = shape_type[Math.floor(Math.random() * shape_type.length)];
        this.shape = shape_selected;
      }
    } else {
      /** @type {string} */
      this.shape = shape_type;
    }
    if ("image" == this.shape) {
      var sh = pJS.particles.shape;
      this.img = {
        src : sh.image.src,
        ratio : sh.image.width / sh.image.height
      };
      if (!this.img.ratio) {
        /** @type {number} */
        this.img.ratio = 1;
      }
      if ("svg" == pJS.tmp.img_type && void 0 != pJS.tmp.source_svg) {
        pJS.fn.vendors.createSvgImg(this);
        if (pJS.tmp.pushing) {
          /** @type {boolean} */
          this.img.loaded = false;
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.particle.prototype.draw = function() {
    /**
     * @return {undefined}
     */
    function drawAll() {
      pJS.canvas.ctx.drawImage(img_obj, p.x - radius, p.y - radius, 2 * radius, 2 * radius / p.img.ratio);
    }
    var p = this;
    if (void 0 != p.radius_bubble) {
      var radius = p.radius_bubble;
    } else {
      radius = p.radius;
    }
    if (void 0 != p.opacity_bubble) {
      var opacity = p.opacity_bubble;
    } else {
      opacity = p.opacity;
    }
    if (p.color.rgb) {
      /** @type {string} */
      var parBgColor = "rgba(" + p.color.rgb.r + "," + p.color.rgb.g + "," + p.color.rgb.b + "," + opacity + ")";
    } else {
      /** @type {string} */
      parBgColor = "hsla(" + p.color.hsl.h + "," + p.color.hsl.s + "%," + p.color.hsl.l + "%," + opacity + ")";
    }
    switch(pJS.canvas.ctx.fillStyle = parBgColor, pJS.canvas.ctx.beginPath(), p.shape) {
      case "circle":
        pJS.canvas.ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI, false);
        break;
      case "edge":
        pJS.canvas.ctx.rect(p.x - radius, p.y - radius, 2 * radius, 2 * radius);
        break;
      case "triangle":
        pJS.fn.vendors.drawShape(pJS.canvas.ctx, p.x - radius, p.y + radius / 1.66, 2 * radius, 3, 2);
        break;
      case "polygon":
        pJS.fn.vendors.drawShape(pJS.canvas.ctx, p.x - radius / (pJS.particles.shape.polygon.nb_sides / 3.5), p.y - radius / .76, 2.66 * radius / (pJS.particles.shape.polygon.nb_sides / 3), pJS.particles.shape.polygon.nb_sides, 1);
        break;
      case "star":
        pJS.fn.vendors.drawShape(pJS.canvas.ctx, p.x - 2 * radius / (pJS.particles.shape.polygon.nb_sides / 4), p.y - radius / 1.52, 2 * radius * 2.66 / (pJS.particles.shape.polygon.nb_sides / 3), pJS.particles.shape.polygon.nb_sides, 2);
        break;
      case "image":
        if ("svg" == pJS.tmp.img_type) {
          var img_obj = p.img.obj;
        } else {
          img_obj = pJS.tmp.img_obj;
        }
        if (img_obj) {
          drawAll();
        }
    }
    pJS.canvas.ctx.closePath();
    if (pJS.particles.shape.stroke.width > 0) {
      /** @type {string} */
      pJS.canvas.ctx.strokeStyle = pJS.particles.shape.stroke.color;
      /** @type {number} */
      pJS.canvas.ctx.lineWidth = pJS.particles.shape.stroke.width;
      pJS.canvas.ctx.stroke();
    }
    pJS.canvas.ctx.fill();
  };
  /**
   * @return {undefined}
   */
  pJS.fn.particlesCreate = function() {
    /** @type {number} */
    var longSideFit = 0;
    for (; longSideFit < pJS.particles.number.value; longSideFit++) {
      pJS.particles.array.push(new pJS.fn.particle(pJS.particles.color, pJS.particles.opacity.value));
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.particlesUpdate = function() {
    /** @type {number} */
    var j = 0;
    for (; j < pJS.particles.array.length; j++) {
      var p = pJS.particles.array[j];
      if (pJS.particles.move.enable) {
        /** @type {number} */
        var ms = pJS.particles.move.speed / 2;
        p.x += p.vx * ms;
        p.y += p.vy * ms;
      }
      if (pJS.particles.opacity.anim.enable && (1 == p.opacity_status ? (p.opacity >= pJS.particles.opacity.value && (p.opacity_status = false), p.opacity += p.vo) : (p.opacity <= pJS.particles.opacity.anim.opacity_min && (p.opacity_status = true), p.opacity -= p.vo), p.opacity < 0 && (p.opacity = 0)), pJS.particles.size.anim.enable && (1 == p.size_status ? (p.radius >= pJS.particles.size.value && (p.size_status = false), p.radius += p.vs) : (p.radius <= pJS.particles.size.anim.size_min && (p.size_status = 
      true), p.radius -= p.vs), p.radius < 0 && (p.radius = 0)), "bounce" == pJS.particles.move.out_mode) {
        var new_pos = {
          x_left : p.radius,
          x_right : pJS.canvas.w,
          y_top : p.radius,
          y_bottom : pJS.canvas.h
        };
      } else {
        new_pos = {
          x_left : -p.radius,
          x_right : pJS.canvas.w + p.radius,
          y_top : -p.radius,
          y_bottom : pJS.canvas.h + p.radius
        };
      }
      switch(p.x - p.radius > pJS.canvas.w ? (p.x = new_pos.x_left, p.y = Math.random() * pJS.canvas.h) : p.x + p.radius < 0 && (p.x = new_pos.x_right, p.y = Math.random() * pJS.canvas.h), p.y - p.radius > pJS.canvas.h ? (p.y = new_pos.y_top, p.x = Math.random() * pJS.canvas.w) : p.y + p.radius < 0 && (p.y = new_pos.y_bottom, p.x = Math.random() * pJS.canvas.w), pJS.particles.move.out_mode) {
        case "bounce":
          if (p.x + p.radius > pJS.canvas.w) {
            /** @type {number} */
            p.vx = -p.vx;
          } else {
            if (p.x - p.radius < 0) {
              /** @type {number} */
              p.vx = -p.vx;
            }
          }
          if (p.y + p.radius > pJS.canvas.h) {
            /** @type {number} */
            p.vy = -p.vy;
          } else {
            if (p.y - p.radius < 0) {
              /** @type {number} */
              p.vy = -p.vy;
            }
          }
      }
      if (isInArray("grab", pJS.interactivity.events.onhover.mode) && pJS.fn.modes.grabParticle(p), (isInArray("bubble", pJS.interactivity.events.onhover.mode) || isInArray("bubble", pJS.interactivity.events.onclick.mode)) && pJS.fn.modes.bubbleParticle(p), (isInArray("repulse", pJS.interactivity.events.onhover.mode) || isInArray("repulse", pJS.interactivity.events.onclick.mode)) && pJS.fn.modes.repulseParticle(p), pJS.particles.line_linked.enable || pJS.particles.move.attract.enable) {
        /** @type {number} */
        var i = j + 1;
        for (; i < pJS.particles.array.length; i++) {
          var p2 = pJS.particles.array[i];
          if (pJS.particles.line_linked.enable) {
            pJS.fn.interact.linkParticles(p, p2);
          }
          if (pJS.particles.move.attract.enable) {
            pJS.fn.interact.attractParticles(p, p2);
          }
          if (pJS.particles.move.bounce) {
            pJS.fn.interact.bounceParticles(p, p2);
          }
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.particlesDraw = function() {
    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);
    pJS.fn.particlesUpdate();
    /** @type {number} */
    var i = 0;
    for (; i < pJS.particles.array.length; i++) {
      var myUnderline = pJS.particles.array[i];
      myUnderline.draw();
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.particlesEmpty = function() {
    /** @type {!Array} */
    pJS.particles.array = [];
  };
  /**
   * @return {undefined}
   */
  pJS.fn.particlesRefresh = function() {
    cancelRequestAnimFrame(pJS.fn.checkAnimFrame);
    cancelRequestAnimFrame(pJS.fn.drawAnimFrame);
    pJS.tmp.source_svg = void 0;
    pJS.tmp.img_obj = void 0;
    /** @type {number} */
    pJS.tmp.count_svg = 0;
    pJS.fn.particlesEmpty();
    pJS.fn.canvasClear();
    pJS.fn.vendors.start();
  };
  /**
   * @param {!Object} p1
   * @param {!Object} p2
   * @return {undefined}
   */
  pJS.fn.interact.linkParticles = function(p1, p2) {
    /** @type {number} */
    var lightI = p1.x - p2.x;
    /** @type {number} */
    var lightJ = p1.y - p2.y;
    /** @type {number} */
    var dist = Math.sqrt(lightI * lightI + lightJ * lightJ);
    if (dist <= pJS.particles.line_linked.distance) {
      /** @type {number} */
      var r = pJS.particles.line_linked.opacity - dist / (1 / pJS.particles.line_linked.opacity) / pJS.particles.line_linked.distance;
      if (r > 0) {
        var color_line = pJS.particles.line_linked.color_rgb_line;
        /** @type {string} */
        pJS.canvas.ctx.strokeStyle = "rgba(" + color_line.r + "," + color_line.g + "," + color_line.b + "," + r + ")";
        /** @type {number} */
        pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;
        pJS.canvas.ctx.beginPath();
        pJS.canvas.ctx.moveTo(p1.x, p1.y);
        pJS.canvas.ctx.lineTo(p2.x, p2.y);
        pJS.canvas.ctx.stroke();
        pJS.canvas.ctx.closePath();
      }
    }
  };
  /**
   * @param {!Object} p1
   * @param {!Object} p2
   * @return {undefined}
   */
  pJS.fn.interact.attractParticles = function(p1, p2) {
    /** @type {number} */
    var dx = p1.x - p2.x;
    /** @type {number} */
    var dy = p1.y - p2.y;
    /** @type {number} */
    var dist = Math.sqrt(dx * dx + dy * dy);
    if (dist <= pJS.particles.line_linked.distance) {
      /** @type {number} */
      var ax = dx / (1E3 * pJS.particles.move.attract.rotateX);
      /** @type {number} */
      var ay = dy / (1E3 * pJS.particles.move.attract.rotateY);
      p1.vx -= ax;
      p1.vy -= ay;
      p2.vx += ax;
      p2.vy += ay;
    }
  };
  /**
   * @param {!Object} p1
   * @param {!Object} p2
   * @return {undefined}
   */
  pJS.fn.interact.bounceParticles = function(p1, p2) {
    /** @type {number} */
    var lightI = p1.x - p2.x;
    /** @type {number} */
    var lightJ = p1.y - p2.y;
    /** @type {number} */
    var maxReconnectTryTimes = Math.sqrt(lightI * lightI + lightJ * lightJ);
    var reconnectTryTimes = p1.radius + p2.radius;
    if (reconnectTryTimes >= maxReconnectTryTimes) {
      /** @type {number} */
      p1.vx = -p1.vx;
      /** @type {number} */
      p1.vy = -p1.vy;
      /** @type {number} */
      p2.vx = -p2.vx;
      /** @type {number} */
      p2.vy = -p2.vy;
    }
  };
  /**
   * @param {number} nb
   * @param {number} pos
   * @return {undefined}
   */
  pJS.fn.modes.pushParticles = function(nb, pos) {
    /** @type {boolean} */
    pJS.tmp.pushing = true;
    /** @type {number} */
    var i = 0;
    for (; nb > i; i++) {
      pJS.particles.array.push(new pJS.fn.particle(pJS.particles.color, pJS.particles.opacity.value, {
        x : pos ? pos.pos_x : Math.random() * pJS.canvas.w,
        y : pos ? pos.pos_y : Math.random() * pJS.canvas.h
      }));
      if (i == nb - 1) {
        if (!pJS.particles.move.enable) {
          pJS.fn.particlesDraw();
        }
        /** @type {boolean} */
        pJS.tmp.pushing = false;
      }
    }
  };
  /**
   * @param {number} nb
   * @return {undefined}
   */
  pJS.fn.modes.removeParticles = function(nb) {
    pJS.particles.array.splice(0, nb);
    if (!pJS.particles.move.enable) {
      pJS.fn.particlesDraw();
    }
  };
  /**
   * @param {!Object} p
   * @return {undefined}
   */
  pJS.fn.modes.bubbleParticle = function(p) {
    /**
     * @return {undefined}
     */
    function init() {
      p.opacity_bubble = p.opacity;
      p.radius_bubble = p.radius;
    }
    /**
     * @param {number} bubble_param
     * @param {number} particles_param
     * @param {number} p_obj_bubble
     * @param {string} p_obj
     * @param {string} id
     * @return {undefined}
     */
    function process(bubble_param, particles_param, p_obj_bubble, p_obj, id) {
      if (bubble_param != particles_param) {
        if (pJS.tmp.bubble_duration_end) {
          if (void 0 != p_obj_bubble) {
            /** @type {number} */
            var value_tmp = p_obj - time_spent * (p_obj - bubble_param) / pJS.interactivity.modes.bubble.duration;
            /** @type {number} */
            var dif = bubble_param - value_tmp;
            value = bubble_param + dif;
            if ("size" == id) {
              p.radius_bubble = value;
            }
            if ("opacity" == id) {
              p.opacity_bubble = value;
            }
          }
        } else {
          if (dist_mouse <= pJS.interactivity.modes.bubble.distance) {
            if (void 0 != p_obj_bubble) {
              /** @type {number} */
              var obj = p_obj_bubble;
            } else {
              /** @type {string} */
              obj = p_obj;
            }
            if (obj != bubble_param) {
              /** @type {number} */
              var value = p_obj - time_spent * (p_obj - bubble_param) / pJS.interactivity.modes.bubble.duration;
              if ("size" == id) {
                /** @type {number} */
                p.radius_bubble = value;
              }
              if ("opacity" == id) {
                /** @type {number} */
                p.opacity_bubble = value;
              }
            }
          } else {
            if ("size" == id) {
              p.radius_bubble = void 0;
            }
            if ("opacity" == id) {
              p.opacity_bubble = void 0;
            }
          }
        }
      }
    }
    if (pJS.interactivity.events.onhover.enable && isInArray("bubble", pJS.interactivity.events.onhover.mode)) {
      /** @type {number} */
      var lightI = p.x - pJS.interactivity.mouse.pos_x;
      /** @type {number} */
      var lightJ = p.y - pJS.interactivity.mouse.pos_y;
      /** @type {number} */
      var dist_mouse = Math.sqrt(lightI * lightI + lightJ * lightJ);
      /** @type {number} */
      var ratio = 1 - dist_mouse / pJS.interactivity.modes.bubble.distance;
      if (dist_mouse <= pJS.interactivity.modes.bubble.distance) {
        if (ratio >= 0 && "mousemove" == pJS.interactivity.status) {
          if (pJS.interactivity.modes.bubble.size != pJS.particles.size.value) {
            if (pJS.interactivity.modes.bubble.size > pJS.particles.size.value) {
              var size = p.radius + pJS.interactivity.modes.bubble.size * ratio;
              if (size >= 0) {
                p.radius_bubble = size;
              }
            } else {
              /** @type {number} */
              var dif = p.radius - pJS.interactivity.modes.bubble.size;
              /** @type {number} */
              size = p.radius - dif * ratio;
              if (size > 0) {
                /** @type {number} */
                p.radius_bubble = size;
              } else {
                /** @type {number} */
                p.radius_bubble = 0;
              }
            }
          }
          if (pJS.interactivity.modes.bubble.opacity != pJS.particles.opacity.value) {
            if (pJS.interactivity.modes.bubble.opacity > pJS.particles.opacity.value) {
              /** @type {number} */
              var opacity = pJS.interactivity.modes.bubble.opacity * ratio;
              if (opacity > p.opacity && opacity <= pJS.interactivity.modes.bubble.opacity) {
                /** @type {number} */
                p.opacity_bubble = opacity;
              }
            } else {
              /** @type {number} */
              opacity = p.opacity - (pJS.particles.opacity.value - pJS.interactivity.modes.bubble.opacity) * ratio;
              if (opacity < p.opacity && opacity >= pJS.interactivity.modes.bubble.opacity) {
                /** @type {number} */
                p.opacity_bubble = opacity;
              }
            }
          }
        }
      } else {
        init();
      }
      if ("mouseleave" == pJS.interactivity.status) {
        init();
      }
    } else {
      if (pJS.interactivity.events.onclick.enable && isInArray("bubble", pJS.interactivity.events.onclick.mode)) {
        if (pJS.tmp.bubble_clicking) {
          /** @type {number} */
          lightI = p.x - pJS.interactivity.mouse.click_pos_x;
          /** @type {number} */
          lightJ = p.y - pJS.interactivity.mouse.click_pos_y;
          /** @type {number} */
          dist_mouse = Math.sqrt(lightI * lightI + lightJ * lightJ);
          /** @type {number} */
          var time_spent = ((new Date).getTime() - pJS.interactivity.mouse.click_time) / 1E3;
          if (time_spent > pJS.interactivity.modes.bubble.duration) {
            /** @type {boolean} */
            pJS.tmp.bubble_duration_end = true;
          }
          if (time_spent > 2 * pJS.interactivity.modes.bubble.duration) {
            /** @type {boolean} */
            pJS.tmp.bubble_clicking = false;
            /** @type {boolean} */
            pJS.tmp.bubble_duration_end = false;
          }
        }
        if (pJS.tmp.bubble_clicking) {
          process(pJS.interactivity.modes.bubble.size, pJS.particles.size.value, p.radius_bubble, p.radius, "size");
          process(pJS.interactivity.modes.bubble.opacity, pJS.particles.opacity.value, p.opacity_bubble, p.opacity, "opacity");
        }
      }
    }
  };
  /**
   * @param {!Object} b
   * @return {undefined}
   */
  pJS.fn.modes.repulseParticle = function(b) {
    /**
     * @return {undefined}
     */
    function process() {
      /** @type {number} */
      var angle = Math.atan2(py, px);
      if (b.vx = speed * Math.cos(angle), b.vy = speed * Math.sin(angle), "bounce" == pJS.particles.move.out_mode) {
        var p = {
          x : b.x + b.vx,
          y : b.y + b.vy
        };
        if (p.x + b.radius > pJS.canvas.w) {
          /** @type {number} */
          b.vx = -b.vx;
        } else {
          if (p.x - b.radius < 0) {
            /** @type {number} */
            b.vx = -b.vx;
          }
        }
        if (p.y + b.radius > pJS.canvas.h) {
          /** @type {number} */
          b.vy = -b.vy;
        } else {
          if (p.y - b.radius < 0) {
            /** @type {number} */
            b.vy = -b.vy;
          }
        }
      }
    }
    if (pJS.interactivity.events.onhover.enable && isInArray("repulse", pJS.interactivity.events.onhover.mode) && "mousemove" == pJS.interactivity.status) {
      /** @type {number} */
      var ux2 = b.x - pJS.interactivity.mouse.pos_x;
      /** @type {number} */
      var uy2 = b.y - pJS.interactivity.mouse.pos_y;
      /** @type {number} */
      var dist_mouse = Math.sqrt(ux2 * ux2 + uy2 * uy2);
      var vel = {
        x : ux2 / dist_mouse,
        y : uy2 / dist_mouse
      };
      /** @type {number} */
      var repulseRadius = pJS.interactivity.modes.repulse.distance;
      /** @type {number} */
      var velocity = 100;
      var delta = clamp(1 / repulseRadius * (-1 * Math.pow(dist_mouse / repulseRadius, 2) + 1) * repulseRadius * velocity, 0, 50);
      var p = {
        x : b.x + vel.x * delta,
        y : b.y + vel.y * delta
      };
      if ("bounce" == pJS.particles.move.out_mode) {
        if (p.x - b.radius > 0 && p.x + b.radius < pJS.canvas.w) {
          b.x = p.x;
        }
        if (p.y - b.radius > 0 && p.y + b.radius < pJS.canvas.h) {
          b.y = p.y;
        }
      } else {
        b.x = p.x;
        b.y = p.y;
      }
    } else {
      if (pJS.interactivity.events.onclick.enable && isInArray("repulse", pJS.interactivity.events.onclick.mode)) {
        if (pJS.tmp.repulse_finish || (pJS.tmp.repulse_count++, pJS.tmp.repulse_count == pJS.particles.array.length && (pJS.tmp.repulse_finish = true)), pJS.tmp.repulse_clicking) {
          /** @type {number} */
          repulseRadius = Math.pow(pJS.interactivity.modes.repulse.distance / 6, 3);
          /** @type {number} */
          var px = pJS.interactivity.mouse.click_pos_x - b.x;
          /** @type {number} */
          var py = pJS.interactivity.mouse.click_pos_y - b.y;
          /** @type {number} */
          var d = px * px + py * py;
          /** @type {number} */
          var speed = -repulseRadius / d * 1;
          if (repulseRadius >= d) {
            process();
          }
        } else {
          if (0 == pJS.tmp.repulse_clicking) {
            b.vx = b.vx_i;
            b.vy = b.vy_i;
          }
        }
      }
    }
  };
  /**
   * @param {!Object} p
   * @return {undefined}
   */
  pJS.fn.modes.grabParticle = function(p) {
    if (pJS.interactivity.events.onhover.enable && "mousemove" == pJS.interactivity.status) {
      /** @type {number} */
      var lightI = p.x - pJS.interactivity.mouse.pos_x;
      /** @type {number} */
      var lightJ = p.y - pJS.interactivity.mouse.pos_y;
      /** @type {number} */
      var dist = Math.sqrt(lightI * lightI + lightJ * lightJ);
      if (dist <= pJS.interactivity.modes.grab.distance) {
        /** @type {number} */
        var n = pJS.interactivity.modes.grab.line_linked.opacity - dist / (1 / pJS.interactivity.modes.grab.line_linked.opacity) / pJS.interactivity.modes.grab.distance;
        if (n > 0) {
          var color_line = pJS.particles.line_linked.color_rgb_line;
          /** @type {string} */
          pJS.canvas.ctx.strokeStyle = "rgba(" + color_line.r + "," + color_line.g + "," + color_line.b + "," + n + ")";
          /** @type {number} */
          pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;
          pJS.canvas.ctx.beginPath();
          pJS.canvas.ctx.moveTo(p.x, p.y);
          pJS.canvas.ctx.lineTo(pJS.interactivity.mouse.pos_x, pJS.interactivity.mouse.pos_y);
          pJS.canvas.ctx.stroke();
          pJS.canvas.ctx.closePath();
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.vendors.eventsListeners = function() {
    if ("window" == pJS.interactivity.detect_on) {
      /** @type {!Window} */
      pJS.interactivity.el = window;
    } else {
      /** @type {(Element|null)} */
      pJS.interactivity.el = pJS.canvas.el;
    }
    if (pJS.interactivity.events.onhover.enable || pJS.interactivity.events.onclick.enable) {
      pJS.interactivity.el.addEventListener("mousemove", function(e) {
        if (pJS.interactivity.el == window) {
          /** @type {number} */
          var pos_x = e.clientX;
          /** @type {number} */
          var pos_y = e.clientY;
        } else {
          /** @type {number} */
          pos_x = e.offsetX || e.clientX;
          /** @type {number} */
          pos_y = e.offsetY || e.clientY;
        }
        /** @type {number} */
        pJS.interactivity.mouse.pos_x = pos_x;
        /** @type {number} */
        pJS.interactivity.mouse.pos_y = pos_y;
        if (pJS.tmp.retina) {
          pJS.interactivity.mouse.pos_x *= pJS.canvas.pxratio;
          pJS.interactivity.mouse.pos_y *= pJS.canvas.pxratio;
        }
        /** @type {string} */
        pJS.interactivity.status = "mousemove";
      });
      pJS.interactivity.el.addEventListener("mouseleave", function(canCreateDiscussions) {
        /** @type {null} */
        pJS.interactivity.mouse.pos_x = null;
        /** @type {null} */
        pJS.interactivity.mouse.pos_y = null;
        /** @type {string} */
        pJS.interactivity.status = "mouseleave";
      });
    }
    if (pJS.interactivity.events.onclick.enable) {
      pJS.interactivity.el.addEventListener("click", function() {
        if (pJS.interactivity.mouse.click_pos_x = pJS.interactivity.mouse.pos_x, pJS.interactivity.mouse.click_pos_y = pJS.interactivity.mouse.pos_y, pJS.interactivity.mouse.click_time = (new Date).getTime(), pJS.interactivity.events.onclick.enable) {
          switch(pJS.interactivity.events.onclick.mode) {
            case "push":
              if (pJS.particles.move.enable) {
                pJS.fn.modes.pushParticles(pJS.interactivity.modes.push.particles_nb, pJS.interactivity.mouse);
              } else {
                if (1 == pJS.interactivity.modes.push.particles_nb) {
                  pJS.fn.modes.pushParticles(pJS.interactivity.modes.push.particles_nb, pJS.interactivity.mouse);
                } else {
                  if (pJS.interactivity.modes.push.particles_nb > 1) {
                    pJS.fn.modes.pushParticles(pJS.interactivity.modes.push.particles_nb);
                  }
                }
              }
              break;
            case "remove":
              pJS.fn.modes.removeParticles(pJS.interactivity.modes.remove.particles_nb);
              break;
            case "bubble":
              /** @type {boolean} */
              pJS.tmp.bubble_clicking = true;
              break;
            case "repulse":
              /** @type {boolean} */
              pJS.tmp.repulse_clicking = true;
              /** @type {number} */
              pJS.tmp.repulse_count = 0;
              /** @type {boolean} */
              pJS.tmp.repulse_finish = false;
              setTimeout(function() {
                /** @type {boolean} */
                pJS.tmp.repulse_clicking = false;
              }, 1E3 * pJS.interactivity.modes.repulse.duration);
          }
        }
      });
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.vendors.densityAutoParticles = function() {
    if (pJS.particles.number.density.enable) {
      /** @type {number} */
      var area = pJS.canvas.el.width * pJS.canvas.el.height / 1E3;
      if (pJS.tmp.retina) {
        /** @type {number} */
        area = area / (2 * pJS.canvas.pxratio);
      }
      /** @type {number} */
      var nb_particles = area * pJS.particles.number.value / pJS.particles.number.density.value_area;
      /** @type {number} */
      var missing_particles = pJS.particles.array.length - nb_particles;
      if (0 > missing_particles) {
        pJS.fn.modes.pushParticles(Math.abs(missing_particles));
      } else {
        pJS.fn.modes.removeParticles(missing_particles);
      }
    }
  };
  /**
   * @param {!Object} p1
   * @param {number} position
   * @return {undefined}
   */
  pJS.fn.vendors.checkOverlap = function(p1, position) {
    /** @type {number} */
    var i = 0;
    for (; i < pJS.particles.array.length; i++) {
      var p2 = pJS.particles.array[i];
      /** @type {number} */
      var lightI = p1.x - p2.x;
      /** @type {number} */
      var lightJ = p1.y - p2.y;
      /** @type {number} */
      var c = Math.sqrt(lightI * lightI + lightJ * lightJ);
      if (c <= p1.radius + p2.radius) {
        p1.x = position ? position.x : Math.random() * pJS.canvas.w;
        p1.y = position ? position.y : Math.random() * pJS.canvas.h;
        pJS.fn.vendors.checkOverlap(p1);
      }
    }
  };
  /**
   * @param {!Object} p
   * @return {undefined}
   */
  pJS.fn.vendors.createSvgImg = function(p) {
    var svgXml = pJS.tmp.source_svg;
    /** @type {!RegExp} */
    var rgbHex = /#([0-9A-F]{3,6})/gi;
    var coloredSvgXml = svgXml.replace(rgbHex, function(a, canCreateDiscussions, i, s) {
      if (p.color.rgb) {
        /** @type {string} */
        var color_value = "rgba(" + p.color.rgb.r + "," + p.color.rgb.g + "," + p.color.rgb.b + "," + p.opacity + ")";
      } else {
        /** @type {string} */
        color_value = "hsla(" + p.color.hsl.h + "," + p.color.hsl.s + "%," + p.color.hsl.l + "%," + p.opacity + ")";
      }
      return color_value;
    });
    /** @type {!Blob} */
    var blob = new Blob([coloredSvgXml], {
      type : "image/svg+xml;charset=utf-8"
    });
    var URL = window.URL || window.webkitURL || window;
    var url = URL.createObjectURL(blob);
    /** @type {!Image} */
    var img = new Image;
    img.addEventListener("load", function() {
      /** @type {!Image} */
      p.img.obj = img;
      /** @type {boolean} */
      p.img.loaded = true;
      URL.revokeObjectURL(url);
      pJS.tmp.count_svg++;
    });
    img.src = url;
  };
  /**
   * @return {undefined}
   */
  pJS.fn.vendors.destroypJS = function() {
    cancelAnimationFrame(pJS.fn.drawAnimFrame);
    canvas_el.remove();
    /** @type {null} */
    pJSDom = null;
  };
  /**
   * @param {!CanvasRenderingContext2D} c
   * @param {number} startX
   * @param {number} startY
   * @param {number} sideLength
   * @param {number} sideCountNumerator
   * @param {number} sideCountDenominator
   * @return {undefined}
   */
  pJS.fn.vendors.drawShape = function(c, startX, startY, sideLength, sideCountNumerator, sideCountDenominator) {
    /** @type {number} */
    var sideCount = sideCountNumerator * sideCountDenominator;
    /** @type {number} */
    var decimalSides = sideCountNumerator / sideCountDenominator;
    /** @type {number} */
    var interiorAngleDegrees = 180 * (decimalSides - 2) / decimalSides;
    /** @type {number} */
    var angle = Math.PI - Math.PI * interiorAngleDegrees / 180;
    c.save();
    c.beginPath();
    c.translate(startX, startY);
    c.moveTo(0, 0);
    /** @type {number} */
    var v = 0;
    for (; sideCount > v; v++) {
      c.lineTo(sideLength, 0);
      c.translate(sideLength, 0);
      c.rotate(angle);
    }
    c.fill();
    c.restore();
  };
  /**
   * @return {undefined}
   */
  pJS.fn.vendors.exportImg = function() {
    window.open(pJS.canvas.el.toDataURL("image/png"), "_blank");
  };
  /**
   * @param {string} callback
   * @return {undefined}
   */
  pJS.fn.vendors.loadImg = function(callback) {
    if (pJS.tmp.img_error = void 0, "" != pJS.particles.shape.image.src) {
      if ("svg" == callback) {
        /** @type {!XMLHttpRequest} */
        var xhr = new XMLHttpRequest;
        xhr.open("GET", pJS.particles.shape.image.src);
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        xhr.onreadystatechange = function(event) {
          if (4 == xhr.readyState) {
            if (200 == xhr.status) {
              pJS.tmp.source_svg = event.currentTarget.response;
              pJS.fn.vendors.checkBeforeDraw();
            } else {
              console.log("Error pJS - Image not found");
              /** @type {boolean} */
              pJS.tmp.img_error = true;
            }
          }
        };
        xhr.send();
      } else {
        /** @type {!Image} */
        var img = new Image;
        img.addEventListener("load", function() {
          /** @type {!Image} */
          pJS.tmp.img_obj = img;
          pJS.fn.vendors.checkBeforeDraw();
        });
        /** @type {string} */
        img.src = pJS.particles.shape.image.src;
      }
    } else {
      console.log("Error pJS - No image.src");
      /** @type {boolean} */
      pJS.tmp.img_error = true;
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.vendors.draw = function() {
    if ("image" == pJS.particles.shape.type) {
      if ("svg" == pJS.tmp.img_type) {
        if (pJS.tmp.count_svg >= pJS.particles.number.value) {
          pJS.fn.particlesDraw();
          if (pJS.particles.move.enable) {
            pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
          } else {
            cancelRequestAnimFrame(pJS.fn.drawAnimFrame);
          }
        } else {
          if (!pJS.tmp.img_error) {
            pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
          }
        }
      } else {
        if (void 0 != pJS.tmp.img_obj) {
          pJS.fn.particlesDraw();
          if (pJS.particles.move.enable) {
            pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
          } else {
            cancelRequestAnimFrame(pJS.fn.drawAnimFrame);
          }
        } else {
          if (!pJS.tmp.img_error) {
            pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
          }
        }
      }
    } else {
      pJS.fn.particlesDraw();
      if (pJS.particles.move.enable) {
        pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
      } else {
        cancelRequestAnimFrame(pJS.fn.drawAnimFrame);
      }
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.vendors.checkBeforeDraw = function() {
    if ("image" == pJS.particles.shape.type) {
      if ("svg" == pJS.tmp.img_type && void 0 == pJS.tmp.source_svg) {
        pJS.tmp.checkAnimFrame = requestAnimFrame(check);
      } else {
        cancelRequestAnimFrame(pJS.tmp.checkAnimFrame);
        if (!pJS.tmp.img_error) {
          pJS.fn.vendors.init();
          pJS.fn.vendors.draw();
        }
      }
    } else {
      pJS.fn.vendors.init();
      pJS.fn.vendors.draw();
    }
  };
  /**
   * @return {undefined}
   */
  pJS.fn.vendors.init = function() {
    pJS.fn.retinaInit();
    pJS.fn.canvasInit();
    pJS.fn.canvasSize();
    pJS.fn.canvasPaint();
    pJS.fn.particlesCreate();
    pJS.fn.vendors.densityAutoParticles();
    pJS.particles.line_linked.color_rgb_line = hexToRgb(pJS.particles.line_linked.color);
  };
  /**
   * @return {undefined}
   */
  pJS.fn.vendors.start = function() {
    if (isInArray("image", pJS.particles.shape.type)) {
      /** @type {string} */
      pJS.tmp.img_type = pJS.particles.shape.image.src.substr(pJS.particles.shape.image.src.length - 3);
      pJS.fn.vendors.loadImg(pJS.tmp.img_type);
    } else {
      pJS.fn.vendors.checkBeforeDraw();
    }
  };
  pJS.fn.vendors.eventsListeners();
  pJS.fn.vendors.start();
};
Object.deepExtend = function(destination, source) {
  var property;
  for (property in source) {
    if (source[property] && source[property].constructor && source[property].constructor === Object) {
      destination[property] = destination[property] || {};
      arguments.callee(destination[property], source[property]);
    } else {
      destination[property] = source[property];
    }
  }
  return destination;
}, window.requestAnimFrame = function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(rafFunction) {
    window.setTimeout(rafFunction, 1E3 / 60);
  };
}(), window.cancelRequestAnimFrame = function() {
  return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout;
}(), window.pJSDom = [], window.particlesJS = function(tag_id, params) {
  if ("string" != typeof tag_id) {
    /** @type {string} */
    params = tag_id;
    /** @type {string} */
    tag_id = "particles-js";
  }
  if (!tag_id) {
    /** @type {string} */
    tag_id = "particles-js";
  }
  /** @type {(Element|null)} */
  var pJS_tag = document.getElementById(tag_id);
  /** @type {string} */
  var pJS_canvas_class = "particles-js-canvas-el";
  var exist_canvas = pJS_tag.getElementsByClassName(pJS_canvas_class);
  if (exist_canvas.length) {
    for (; exist_canvas.length > 0;) {
      pJS_tag.removeChild(exist_canvas[0]);
    }
  }
  /** @type {!Element} */
  var canvas_el = document.createElement("canvas");
  /** @type {string} */
  canvas_el.className = pJS_canvas_class;
  /** @type {string} */
  canvas_el.style.width = "100%";
  /** @type {string} */
  canvas_el.style.height = "100%";
  /** @type {!Node} */
  var canvas = document.getElementById(tag_id).appendChild(canvas_el);
  if (null != canvas) {
    pJSDom.push(new pJS(tag_id, params));
  }
}, window.particlesJS.load = function(tag_id, params, t) {
  /** @type {!XMLHttpRequest} */
  var xhr = new XMLHttpRequest;
  xhr.open("GET", params);
  /**
   * @param {!Event} event
   * @return {undefined}
   */
  xhr.onreadystatechange = function(event) {
    if (4 == xhr.readyState) {
      if (200 == xhr.status) {
        /** @type {*} */
        var params = JSON.parse(event.currentTarget.response);
        window.particlesJS(tag_id, params);
        if (t) {
          t();
        }
      } else {
        console.log("Error pJS - XMLHttpRequest status: " + xhr.status);
        console.log("Error pJS - File config not found");
      }
    }
  };
  xhr.send();
};
